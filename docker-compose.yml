services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: immune-me-backend
    restart: unless-stopped
    depends_on:
      - db
    environment:
      TZ: UTC
      PORT: 3333
      HOST: 0.0.0.0
      NODE_ENV: production
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: pg
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      LOG_LEVEL: info
    ports:
      - "3333:3333"
    networks:
      - immune-me-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: immune-me-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - immune-me-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database service
  db:
    image: postgres:15-alpine
    container_name: immune-me-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - immune-me-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  immune-me-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local